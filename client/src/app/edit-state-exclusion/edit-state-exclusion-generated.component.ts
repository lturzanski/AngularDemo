/*
  This file is automatically generated. Any changes will be overwritten.
  Modify edit-state-exclusion.component.ts instead.
*/
import { LOCALE_ID, ChangeDetectorRef, ViewChild, AfterViewInit, Injector, OnInit, OnDestroy } from '@angular/core';
import { Router, ActivatedRoute } from '@angular/router';
import { Location } from '@angular/common';
import { HttpClient, HttpParams, HttpHeaders } from '@angular/common/http';
import { Subscription } from 'rxjs';

import { DialogService, DIALOG_PARAMETERS, DialogRef } from '@radzen/angular/dist/dialog';
import { NotificationService } from '@radzen/angular/dist/notification';
import { ContentComponent } from '@radzen/angular/dist/content';
import { FormComponent } from '@radzen/angular/dist/form';

import { ConfigService } from '../config.service';

import { StateExclusionsService } from '../state-exclusions.service';

export class EditStateExclusionGenerated implements AfterViewInit, OnInit, OnDestroy {
  // Components
  @ViewChild('content1') content1: ContentComponent;
  @ViewChild('form0') form0: FormComponent;

  router: Router;

  cd: ChangeDetectorRef;

  route: ActivatedRoute;

  notificationService: NotificationService;

  configService: ConfigService;

  dialogService: DialogService;

  dialogRef: DialogRef;

  httpClient: HttpClient;

  locale: string;

  _location: Location;

  _subscription: Subscription;

  stateExclusions: StateExclusionsService;
  stateexclstateexclusion: any;
  getByStateExclStatesForStateExcl_StateIdResult: any;
  getByStateExclExclusionsForStateExcl_ExclusionIdResult: any;
  getStateExclStatesForStateExcl_StateIdPageSize: any;
  getStateExclStatesForStateExcl_StateIdResult: any;
  getStateExclStatesForStateExcl_StateIdCount: any;
  getStateExclExclusionsForStateExcl_ExclusionIdPageSize: any;
  getStateExclExclusionsForStateExcl_ExclusionIdResult: any;
  getStateExclExclusionsForStateExcl_ExclusionIdCount: any;
  parameters: any;

  constructor(private injector: Injector) {
  }

  ngOnInit() {
    this.notificationService = this.injector.get(NotificationService);

    this.configService = this.injector.get(ConfigService);

    this.dialogService = this.injector.get(DialogService);

    this.dialogRef = this.injector.get(DialogRef, null);

    this.locale = this.injector.get(LOCALE_ID);

    this.router = this.injector.get(Router);

    this.cd = this.injector.get(ChangeDetectorRef);

    this._location = this.injector.get(Location);

    this.route = this.injector.get(ActivatedRoute);

    this.httpClient = this.injector.get(HttpClient);

    this.stateExclusions = this.injector.get(StateExclusionsService);
  }

  ngAfterViewInit() {
    this._subscription = this.route.params.subscribe(parameters => {
      if (this.dialogRef) {
        this.parameters = this.injector.get(DIALOG_PARAMETERS);
      } else {
        this.parameters = parameters;
      }
      this.load();
      this.cd.detectChanges();
    });
  }

  ngOnDestroy() {
    if (this._subscription) {
      this._subscription.unsubscribe();
    }
  }


  load() {
    this.stateExclusions.getStateExclStateExclusionById(null, this.parameters.Id)
    .subscribe((result: any) => {
      this.stateexclstateexclusion = result;

      if (this.stateexclstateexclusion.StateExcl_StateId != null) {
              this.stateExclusions.getStateExclStateById(null, this.stateexclstateexclusion.StateExcl_StateId)
        .subscribe((result: any) => {
              this.getByStateExclStatesForStateExcl_StateIdResult = result;
        }, (result: any) => {
      
        });
      }

      if (this.stateexclstateexclusion.StateExcl_ExclusionId != null) {
              this.stateExclusions.getStateExclExclusionById(null, this.stateexclstateexclusion.StateExcl_ExclusionId)
        .subscribe((result: any) => {
              this.getByStateExclExclusionsForStateExcl_ExclusionIdResult = result;
        }, (result: any) => {
      
        });
      }
    }, (result: any) => {

    });

    this.getStateExclStatesForStateExcl_StateIdPageSize = 10;

    this.stateExclusions.getStateExclStates(null, this.getStateExclStatesForStateExcl_StateIdPageSize, 0, null, true, null, null, null)
    .subscribe((result: any) => {
      this.getStateExclStatesForStateExcl_StateIdResult = result.value;

      this.getStateExclStatesForStateExcl_StateIdCount = result['@odata.count'];
    }, (result: any) => {

    });

    this.getStateExclExclusionsForStateExcl_ExclusionIdPageSize = 10;

    this.stateExclusions.getStateExclExclusions(null, this.getStateExclExclusionsForStateExcl_ExclusionIdPageSize, 0, null, true, null, null, null)
    .subscribe((result: any) => {
      this.getStateExclExclusionsForStateExcl_ExclusionIdResult = result.value;

      this.getStateExclExclusionsForStateExcl_ExclusionIdCount = result['@odata.count'];
    }, (result: any) => {

    });
  }

  form0Cancel(event: any) {
    if (this.dialogRef) {
      this.dialogRef.close();
    } else {
      this._location.back();
    }
  }

  form0LoadData(event: any) {
    if (event.property == 'StateExcl_StateId') {
          this.stateExclusions.getStateExclStates(`${event.filter}`, event.top, event.skip, `${event.orderby}`, true, null, null, null)
      .subscribe((result: any) => {
          this.getStateExclStatesForStateExcl_StateIdResult = result.value;

      this.getStateExclStatesForStateExcl_StateIdCount = result['@odata.count'];
      }, (result: any) => {
    
      });
    }

    if (event.property == 'StateExcl_ExclusionId') {
          this.stateExclusions.getStateExclExclusions(`${event.filter}`, event.top, event.skip, `${event.orderby}`, true, null, null, null)
      .subscribe((result: any) => {
          this.getStateExclExclusionsForStateExcl_ExclusionIdResult = result.value;

      this.getStateExclExclusionsForStateExcl_ExclusionIdCount = result['@odata.count'];
      }, (result: any) => {
    
      });
    }
  }

  form0Submit(event: any) {
    this.stateExclusions.updateStateExclStateExclusion(null, this.parameters.Id, event)
    .subscribe((result: any) => {
      if (this.dialogRef) {
        this.dialogRef.close();
      } else {
        this._location.back();
      }
    }, (result: any) => {
      this.notificationService.notify({ severity: "error", summary: `Error`, detail: `Unable to update StateExclStateExclusion` });
    });
  }
}
